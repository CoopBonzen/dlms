'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="DLMS_db")>  _
Partial Public Class DlmsDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertUserGroupRole(instance As UserGroupRole)
    End Sub
  Partial Private Sub UpdateUserGroupRole(instance As UserGroupRole)
    End Sub
  Partial Private Sub DeleteUserGroupRole(instance As UserGroupRole)
    End Sub
  Partial Private Sub InsertGeneral(instance As General)
    End Sub
  Partial Private Sub UpdateGeneral(instance As General)
    End Sub
  Partial Private Sub DeleteGeneral(instance As General)
    End Sub
  Partial Private Sub InsertGeneralFile(instance As GeneralFile)
    End Sub
  Partial Private Sub UpdateGeneralFile(instance As GeneralFile)
    End Sub
  Partial Private Sub DeleteGeneralFile(instance As GeneralFile)
    End Sub
  Partial Private Sub InsertProposalFile(instance As ProposalFile)
    End Sub
  Partial Private Sub UpdateProposalFile(instance As ProposalFile)
    End Sub
  Partial Private Sub DeleteProposalFile(instance As ProposalFile)
    End Sub
  Partial Private Sub InsertQuotationDescription(instance As QuotationDescription)
    End Sub
  Partial Private Sub UpdateQuotationDescription(instance As QuotationDescription)
    End Sub
  Partial Private Sub DeleteQuotationDescription(instance As QuotationDescription)
    End Sub
  Partial Private Sub InsertQuotationDescriptionSub(instance As QuotationDescriptionSub)
    End Sub
  Partial Private Sub UpdateQuotationDescriptionSub(instance As QuotationDescriptionSub)
    End Sub
  Partial Private Sub DeleteQuotationDescriptionSub(instance As QuotationDescriptionSub)
    End Sub
  Partial Private Sub InsertQuotationDetail(instance As QuotationDetail)
    End Sub
  Partial Private Sub UpdateQuotationDetail(instance As QuotationDetail)
    End Sub
  Partial Private Sub DeleteQuotationDetail(instance As QuotationDetail)
    End Sub
  Partial Private Sub InsertQuotationProposal(instance As QuotationProposal)
    End Sub
  Partial Private Sub UpdateQuotationProposal(instance As QuotationProposal)
    End Sub
  Partial Private Sub DeleteQuotationProposal(instance As QuotationProposal)
    End Sub
  Partial Private Sub InsertUser(instance As User)
    End Sub
  Partial Private Sub UpdateUser(instance As User)
    End Sub
  Partial Private Sub DeleteUser(instance As User)
    End Sub
  Partial Private Sub InsertUserGroup(instance As UserGroup)
    End Sub
  Partial Private Sub UpdateUserGroup(instance As UserGroup)
    End Sub
  Partial Private Sub DeleteUserGroup(instance As UserGroup)
    End Sub
  Partial Private Sub InsertQuotationItem(instance As QuotationItem)
    End Sub
  Partial Private Sub UpdateQuotationItem(instance As QuotationItem)
    End Sub
  Partial Private Sub DeleteQuotationItem(instance As QuotationItem)
    End Sub
  Partial Private Sub InsertQuotationFile(instance As QuotationFile)
    End Sub
  Partial Private Sub UpdateQuotationFile(instance As QuotationFile)
    End Sub
  Partial Private Sub DeleteQuotationFile(instance As QuotationFile)
    End Sub
  Partial Private Sub InsertQuotation(instance As Quotation)
    End Sub
  Partial Private Sub UpdateQuotation(instance As Quotation)
    End Sub
  Partial Private Sub DeleteQuotation(instance As Quotation)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("DLMSConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property UserGroupRoles() As System.Data.Linq.Table(Of UserGroupRole)
		Get
			Return Me.GetTable(Of UserGroupRole)
		End Get
	End Property
	
	Public ReadOnly Property Conditions() As System.Data.Linq.Table(Of Condition)
		Get
			Return Me.GetTable(Of Condition)
		End Get
	End Property
	
	Public ReadOnly Property Generals() As System.Data.Linq.Table(Of General)
		Get
			Return Me.GetTable(Of General)
		End Get
	End Property
	
	Public ReadOnly Property GeneralFiles() As System.Data.Linq.Table(Of GeneralFile)
		Get
			Return Me.GetTable(Of GeneralFile)
		End Get
	End Property
	
	Public ReadOnly Property ProposalFiles() As System.Data.Linq.Table(Of ProposalFile)
		Get
			Return Me.GetTable(Of ProposalFile)
		End Get
	End Property
	
	Public ReadOnly Property QuotationDescriptions() As System.Data.Linq.Table(Of QuotationDescription)
		Get
			Return Me.GetTable(Of QuotationDescription)
		End Get
	End Property
	
	Public ReadOnly Property QuotationDescriptionSubs() As System.Data.Linq.Table(Of QuotationDescriptionSub)
		Get
			Return Me.GetTable(Of QuotationDescriptionSub)
		End Get
	End Property
	
	Public ReadOnly Property QuotationDetails() As System.Data.Linq.Table(Of QuotationDetail)
		Get
			Return Me.GetTable(Of QuotationDetail)
		End Get
	End Property
	
	Public ReadOnly Property QuotationProposals() As System.Data.Linq.Table(Of QuotationProposal)
		Get
			Return Me.GetTable(Of QuotationProposal)
		End Get
	End Property
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
		Get
			Return Me.GetTable(Of User)
		End Get
	End Property
	
	Public ReadOnly Property UserGroups() As System.Data.Linq.Table(Of UserGroup)
		Get
			Return Me.GetTable(Of UserGroup)
		End Get
	End Property
	
	Public ReadOnly Property QuotationItems() As System.Data.Linq.Table(Of QuotationItem)
		Get
			Return Me.GetTable(Of QuotationItem)
		End Get
	End Property
	
	Public ReadOnly Property vw_Companies() As System.Data.Linq.Table(Of vw_Company)
		Get
			Return Me.GetTable(Of vw_Company)
		End Get
	End Property
	
	Public ReadOnly Property vw_CompanyAttns() As System.Data.Linq.Table(Of vw_CompanyAttn)
		Get
			Return Me.GetTable(Of vw_CompanyAttn)
		End Get
	End Property
	
	Public ReadOnly Property QuotationFiles() As System.Data.Linq.Table(Of QuotationFile)
		Get
			Return Me.GetTable(Of QuotationFile)
		End Get
	End Property
	
	Public ReadOnly Property Quotations() As System.Data.Linq.Table(Of Quotation)
		Get
			Return Me.GetTable(Of Quotation)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserGroupRole")>  _
Partial Public Class UserGroupRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _user_group_id As Integer
	
	Private _role_name As String
	
	Private _UserGroup As EntityRef(Of UserGroup)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuser_group_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onuser_group_idChanged()
    End Sub
    Partial Private Sub Onrole_nameChanging(value As String)
    End Sub
    Partial Private Sub Onrole_nameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UserGroup = CType(Nothing, EntityRef(Of UserGroup))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_group_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property user_group_id() As Integer
		Get
			Return Me._user_group_id
		End Get
		Set
			If ((Me._user_group_id = value)  _
						= false) Then
				If Me._UserGroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onuser_group_idChanging(value)
				Me.SendPropertyChanging
				Me._user_group_id = value
				Me.SendPropertyChanged("user_group_id")
				Me.Onuser_group_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_role_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property role_name() As String
		Get
			Return Me._role_name
		End Get
		Set
			If (String.Equals(Me._role_name, value) = false) Then
				Me.Onrole_nameChanging(value)
				Me.SendPropertyChanging
				Me._role_name = value
				Me.SendPropertyChanged("role_name")
				Me.Onrole_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserGroup_UserGroupRole", Storage:="_UserGroup", ThisKey:="user_group_id", OtherKey:="user_group_id", IsForeignKey:=true)>  _
	Public Property UserGroup() As UserGroup
		Get
			Return Me._UserGroup.Entity
		End Get
		Set
			Dim previousValue As UserGroup = Me._UserGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UserGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UserGroup.Entity = Nothing
					previousValue.UserGroupRoles.Remove(Me)
				End If
				Me._UserGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserGroupRoles.Add(Me)
					Me._user_group_id = value.user_group_id
				Else
					Me._user_group_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("UserGroup")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Condition")>  _
Partial Public Class Condition
	
	Private _Condition As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Condition", DbType:="VarChar(MAX)")>  _
	Public Property Condition() As String
		Get
			Return Me._Condition
		End Get
		Set
			If (String.Equals(Me._Condition, value) = false) Then
				Me._Condition = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.General")>  _
Partial Public Class General
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _G_ID As String
	
	Private _Date As System.Nullable(Of Date)
	
	Private _DateSend As System.Nullable(Of Date)
	
	Private _ContactCom As String
	
	Private _ContactName As String
	
	Private _Title As String
	
	Private _Note As String
	
	Private _BookingBy As String
	
	Private _P_CreateDate As Date
	
	Private _P_RunningNo As Integer
	
	Private _GeneralFile As EntityRef(Of GeneralFile)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnG_IDChanging(value As String)
    End Sub
    Partial Private Sub OnG_IDChanged()
    End Sub
    Partial Private Sub OnG_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnG_DateChanged()
    End Sub
    Partial Private Sub OnDateSendChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateSendChanged()
    End Sub
    Partial Private Sub OnContactComChanging(value As String)
    End Sub
    Partial Private Sub OnContactComChanged()
    End Sub
    Partial Private Sub OnContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnContactNameChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnBookingByChanging(value As String)
    End Sub
    Partial Private Sub OnBookingByChanged()
    End Sub
    Partial Private Sub OnG_CreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnG_CreateDateChanged()
    End Sub
    Partial Private Sub OnG_RunningNoChanging(value As Integer)
    End Sub
    Partial Private Sub OnG_RunningNoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._GeneralFile = CType(Nothing, EntityRef(Of GeneralFile))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_G_ID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property G_ID() As String
		Get
			Return Me._G_ID
		End Get
		Set
			If (String.Equals(Me._G_ID, value) = false) Then
				If Me._GeneralFile.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnG_IDChanging(value)
				Me.SendPropertyChanging
				Me._G_ID = value
				Me.SendPropertyChanged("G_ID")
				Me.OnG_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Date", DbType:="Date")>  _
	Public Property G_Date() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnG_DateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("G_Date")
				Me.OnG_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateSend", DbType:="Date")>  _
	Public Property DateSend() As System.Nullable(Of Date)
		Get
			Return Me._DateSend
		End Get
		Set
			If (Me._DateSend.Equals(value) = false) Then
				Me.OnDateSendChanging(value)
				Me.SendPropertyChanging
				Me._DateSend = value
				Me.SendPropertyChanged("DateSend")
				Me.OnDateSendChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactCom", DbType:="VarChar(200)")>  _
	Public Property ContactCom() As String
		Get
			Return Me._ContactCom
		End Get
		Set
			If (String.Equals(Me._ContactCom, value) = false) Then
				Me.OnContactComChanging(value)
				Me.SendPropertyChanging
				Me._ContactCom = value
				Me.SendPropertyChanged("ContactCom")
				Me.OnContactComChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="VarChar(200)")>  _
	Public Property ContactName() As String
		Get
			Return Me._ContactName
		End Get
		Set
			If (String.Equals(Me._ContactName, value) = false) Then
				Me.OnContactNameChanging(value)
				Me.SendPropertyChanging
				Me._ContactName = value
				Me.SendPropertyChanged("ContactName")
				Me.OnContactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(200)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="VarChar(300)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookingBy", DbType:="VarChar(50)")>  _
	Public Property BookingBy() As String
		Get
			Return Me._BookingBy
		End Get
		Set
			If (String.Equals(Me._BookingBy, value) = false) Then
				Me.OnBookingByChanging(value)
				Me.SendPropertyChanging
				Me._BookingBy = value
				Me.SendPropertyChanged("BookingBy")
				Me.OnBookingByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_P_CreateDate")>  _
	Public Property G_CreateDate() As Date
		Get
			Return Me._P_CreateDate
		End Get
		Set
			If ((Me._P_CreateDate = value)  _
						= false) Then
				Me.OnG_CreateDateChanging(value)
				Me.SendPropertyChanging
				Me._P_CreateDate = value
				Me.SendPropertyChanged("G_CreateDate")
				Me.OnG_CreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_P_RunningNo")>  _
	Public Property G_RunningNo() As Integer
		Get
			Return Me._P_RunningNo
		End Get
		Set
			If ((Me._P_RunningNo = value)  _
						= false) Then
				Me.OnG_RunningNoChanging(value)
				Me.SendPropertyChanging
				Me._P_RunningNo = value
				Me.SendPropertyChanged("G_RunningNo")
				Me.OnG_RunningNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GeneralFile_General", Storage:="_GeneralFile", ThisKey:="G_ID", OtherKey:="G_ID", IsForeignKey:=true)>  _
	Public Property GeneralFile() As GeneralFile
		Get
			Return Me._GeneralFile.Entity
		End Get
		Set
			Dim previousValue As GeneralFile = Me._GeneralFile.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._GeneralFile.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._GeneralFile.Entity = Nothing
					previousValue.Generals.Remove(Me)
				End If
				Me._GeneralFile.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Generals.Add(Me)
					Me._G_ID = value.G_ID
				Else
					Me._G_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("GeneralFile")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GeneralFile")>  _
Partial Public Class GeneralFile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _G_FileID As Integer
	
	Private _G_FileName As String
	
	Private _G_FileDate As System.Nullable(Of Date)
	
	Private _G_ID As String
	
	Private _Generals As EntitySet(Of General)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnG_FileIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnG_FileIDChanged()
    End Sub
    Partial Private Sub OnG_FileNameChanging(value As String)
    End Sub
    Partial Private Sub OnG_FileNameChanged()
    End Sub
    Partial Private Sub OnG_FileDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnG_FileDateChanged()
    End Sub
    Partial Private Sub OnG_IDChanging(value As String)
    End Sub
    Partial Private Sub OnG_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Generals = New EntitySet(Of General)(AddressOf Me.attach_Generals, AddressOf Me.detach_Generals)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_G_FileID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property G_FileID() As Integer
		Get
			Return Me._G_FileID
		End Get
		Set
			If ((Me._G_FileID = value)  _
						= false) Then
				Me.OnG_FileIDChanging(value)
				Me.SendPropertyChanging
				Me._G_FileID = value
				Me.SendPropertyChanged("G_FileID")
				Me.OnG_FileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_G_FileName", DbType:="VarChar(200)")>  _
	Public Property G_FileName() As String
		Get
			Return Me._G_FileName
		End Get
		Set
			If (String.Equals(Me._G_FileName, value) = false) Then
				Me.OnG_FileNameChanging(value)
				Me.SendPropertyChanging
				Me._G_FileName = value
				Me.SendPropertyChanged("G_FileName")
				Me.OnG_FileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_G_FileDate", DbType:="DateTime")>  _
	Public Property G_FileDate() As System.Nullable(Of Date)
		Get
			Return Me._G_FileDate
		End Get
		Set
			If (Me._G_FileDate.Equals(value) = false) Then
				Me.OnG_FileDateChanging(value)
				Me.SendPropertyChanging
				Me._G_FileDate = value
				Me.SendPropertyChanged("G_FileDate")
				Me.OnG_FileDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_G_ID", CanBeNull:=false)>  _
	Public Property G_ID() As String
		Get
			Return Me._G_ID
		End Get
		Set
			If (String.Equals(Me._G_ID, value) = false) Then
				Me.OnG_IDChanging(value)
				Me.SendPropertyChanging
				Me._G_ID = value
				Me.SendPropertyChanged("G_ID")
				Me.OnG_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GeneralFile_General", Storage:="_Generals", ThisKey:="G_ID", OtherKey:="G_ID")>  _
	Public Property Generals() As EntitySet(Of General)
		Get
			Return Me._Generals
		End Get
		Set
			Me._Generals.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Generals(ByVal entity As General)
		Me.SendPropertyChanging
		entity.GeneralFile = Me
	End Sub
	
	Private Sub detach_Generals(ByVal entity As General)
		Me.SendPropertyChanging
		entity.GeneralFile = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProposalFile")>  _
Partial Public Class ProposalFile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _P_FileID As Integer
	
	Private _P_FileName As String
	
	Private _P_FileDate As System.Nullable(Of Date)
	
	Private _P_ID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnP_FileIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnP_FileIDChanged()
    End Sub
    Partial Private Sub OnP_FileNameChanging(value As String)
    End Sub
    Partial Private Sub OnP_FileNameChanged()
    End Sub
    Partial Private Sub OnP_FileDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnP_FileDateChanged()
    End Sub
    Partial Private Sub OnP_IDChanging(value As String)
    End Sub
    Partial Private Sub OnP_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_P_FileID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property P_FileID() As Integer
		Get
			Return Me._P_FileID
		End Get
		Set
			If ((Me._P_FileID = value)  _
						= false) Then
				Me.OnP_FileIDChanging(value)
				Me.SendPropertyChanging
				Me._P_FileID = value
				Me.SendPropertyChanged("P_FileID")
				Me.OnP_FileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_P_FileName", DbType:="VarChar(200)")>  _
	Public Property P_FileName() As String
		Get
			Return Me._P_FileName
		End Get
		Set
			If (String.Equals(Me._P_FileName, value) = false) Then
				Me.OnP_FileNameChanging(value)
				Me.SendPropertyChanging
				Me._P_FileName = value
				Me.SendPropertyChanged("P_FileName")
				Me.OnP_FileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_P_FileDate", DbType:="DateTime")>  _
	Public Property P_FileDate() As System.Nullable(Of Date)
		Get
			Return Me._P_FileDate
		End Get
		Set
			If (Me._P_FileDate.Equals(value) = false) Then
				Me.OnP_FileDateChanging(value)
				Me.SendPropertyChanging
				Me._P_FileDate = value
				Me.SendPropertyChanged("P_FileDate")
				Me.OnP_FileDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_P_ID", DbType:="VarChar(50)")>  _
	Public Property P_ID() As String
		Get
			Return Me._P_ID
		End Get
		Set
			If (String.Equals(Me._P_ID, value) = false) Then
				Me.OnP_IDChanging(value)
				Me.SendPropertyChanging
				Me._P_ID = value
				Me.SendPropertyChanged("P_ID")
				Me.OnP_IDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QuotationDescription")>  _
Partial Public Class QuotationDescription
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Q_Detail_Main As Integer
	
	Private _Q_Detail_Main As String
	
	Private _QuotationDescriptionSubs As EntitySet(Of QuotationDescriptionSub)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Q_Detail_MainChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Q_Detail_MainChanged()
    End Sub
    Partial Private Sub OnQ_Detail_MainChanging(value As String)
    End Sub
    Partial Private Sub OnQ_Detail_MainChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._QuotationDescriptionSubs = New EntitySet(Of QuotationDescriptionSub)(AddressOf Me.attach_QuotationDescriptionSubs, AddressOf Me.detach_QuotationDescriptionSubs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Q_Detail_Main", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_Q_Detail_Main() As Integer
		Get
			Return Me._ID_Q_Detail_Main
		End Get
		Set
			If ((Me._ID_Q_Detail_Main = value)  _
						= false) Then
				Me.OnID_Q_Detail_MainChanging(value)
				Me.SendPropertyChanging
				Me._ID_Q_Detail_Main = value
				Me.SendPropertyChanged("ID_Q_Detail_Main")
				Me.OnID_Q_Detail_MainChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_Detail_Main", DbType:="VarChar(500)")>  _
	Public Property Q_Detail_Main() As String
		Get
			Return Me._Q_Detail_Main
		End Get
		Set
			If (String.Equals(Me._Q_Detail_Main, value) = false) Then
				Me.OnQ_Detail_MainChanging(value)
				Me.SendPropertyChanging
				Me._Q_Detail_Main = value
				Me.SendPropertyChanged("Q_Detail_Main")
				Me.OnQ_Detail_MainChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QuotationDescription_QuotationDescriptionSub", Storage:="_QuotationDescriptionSubs", ThisKey:="ID_Q_Detail_Main", OtherKey:="ID_Q_Detail_Main")>  _
	Public Property QuotationDescriptionSubs() As EntitySet(Of QuotationDescriptionSub)
		Get
			Return Me._QuotationDescriptionSubs
		End Get
		Set
			Me._QuotationDescriptionSubs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_QuotationDescriptionSubs(ByVal entity As QuotationDescriptionSub)
		Me.SendPropertyChanging
		entity.QuotationDescription = Me
	End Sub
	
	Private Sub detach_QuotationDescriptionSubs(ByVal entity As QuotationDescriptionSub)
		Me.SendPropertyChanging
		entity.QuotationDescription = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QuotationDescriptionSub")>  _
Partial Public Class QuotationDescriptionSub
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Q_Detail_Sub As Integer
	
	Private _Q_Detail_Sub As String
	
	Private _Price As System.Nullable(Of Decimal)
	
	Private _ID_Q_Detail_Main As System.Nullable(Of Integer)
	
	Private _QuotationItems As EntitySet(Of QuotationItem)
	
	Private _QuotationDescription As EntityRef(Of QuotationDescription)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Q_Detail_SubChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Q_Detail_SubChanged()
    End Sub
    Partial Private Sub OnQ_Detail_SubChanging(value As String)
    End Sub
    Partial Private Sub OnQ_Detail_SubChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnID_Q_Detail_MainChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Q_Detail_MainChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._QuotationItems = New EntitySet(Of QuotationItem)(AddressOf Me.attach_QuotationItems, AddressOf Me.detach_QuotationItems)
		Me._QuotationDescription = CType(Nothing, EntityRef(Of QuotationDescription))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Q_Detail_Sub", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_Q_Detail_Sub() As Integer
		Get
			Return Me._ID_Q_Detail_Sub
		End Get
		Set
			If ((Me._ID_Q_Detail_Sub = value)  _
						= false) Then
				Me.OnID_Q_Detail_SubChanging(value)
				Me.SendPropertyChanging
				Me._ID_Q_Detail_Sub = value
				Me.SendPropertyChanged("ID_Q_Detail_Sub")
				Me.OnID_Q_Detail_SubChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_Detail_Sub", DbType:="VarChar(500)")>  _
	Public Property Q_Detail_Sub() As String
		Get
			Return Me._Q_Detail_Sub
		End Get
		Set
			If (String.Equals(Me._Q_Detail_Sub, value) = false) Then
				Me.OnQ_Detail_SubChanging(value)
				Me.SendPropertyChanging
				Me._Q_Detail_Sub = value
				Me.SendPropertyChanged("Q_Detail_Sub")
				Me.OnQ_Detail_SubChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Decimal(18,2)")>  _
	Public Property Price() As System.Nullable(Of Decimal)
		Get
			Return Me._Price
		End Get
		Set
			If (Me._Price.Equals(value) = false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Q_Detail_Main", DbType:="Int")>  _
	Public Property ID_Q_Detail_Main() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Q_Detail_Main
		End Get
		Set
			If (Me._ID_Q_Detail_Main.Equals(value) = false) Then
				If Me._QuotationDescription.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Q_Detail_MainChanging(value)
				Me.SendPropertyChanging
				Me._ID_Q_Detail_Main = value
				Me.SendPropertyChanged("ID_Q_Detail_Main")
				Me.OnID_Q_Detail_MainChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QuotationDescriptionSub_QuotationItem", Storage:="_QuotationItems", ThisKey:="ID_Q_Detail_Sub", OtherKey:="ID_Q_Detail_Sub")>  _
	Public Property QuotationItems() As EntitySet(Of QuotationItem)
		Get
			Return Me._QuotationItems
		End Get
		Set
			Me._QuotationItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QuotationDescription_QuotationDescriptionSub", Storage:="_QuotationDescription", ThisKey:="ID_Q_Detail_Main", OtherKey:="ID_Q_Detail_Main", IsForeignKey:=true)>  _
	Public Property QuotationDescription() As QuotationDescription
		Get
			Return Me._QuotationDescription.Entity
		End Get
		Set
			Dim previousValue As QuotationDescription = Me._QuotationDescription.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._QuotationDescription.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._QuotationDescription.Entity = Nothing
					previousValue.QuotationDescriptionSubs.Remove(Me)
				End If
				Me._QuotationDescription.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.QuotationDescriptionSubs.Add(Me)
					Me._ID_Q_Detail_Main = value.ID_Q_Detail_Main
				Else
					Me._ID_Q_Detail_Main = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("QuotationDescription")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_QuotationItems(ByVal entity As QuotationItem)
		Me.SendPropertyChanging
		entity.QuotationDescriptionSub = Me
	End Sub
	
	Private Sub detach_QuotationItems(ByVal entity As QuotationItem)
		Me.SendPropertyChanging
		entity.QuotationDescriptionSub = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QuotationDetail")>  _
Partial Public Class QuotationDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Q_ID As String
	
	Private _Q_Date As System.Nullable(Of Date)
	
	Private _Q_Bonzen As String
	
	Private _Q_Tel As String
	
	Private _Q_Email As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQ_Detail_IDChanging(value As String)
    End Sub
    Partial Private Sub OnQ_Detail_IDChanged()
    End Sub
    Partial Private Sub OnQ_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnQ_DateChanged()
    End Sub
    Partial Private Sub OnQ_BonzenChanging(value As String)
    End Sub
    Partial Private Sub OnQ_BonzenChanged()
    End Sub
    Partial Private Sub OnQ_TelChanging(value As String)
    End Sub
    Partial Private Sub OnQ_TelChanged()
    End Sub
    Partial Private Sub OnQ_EmailChanging(value As String)
    End Sub
    Partial Private Sub OnQ_EmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_ID", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Q_Detail_ID() As String
		Get
			Return Me._Q_ID
		End Get
		Set
			If (String.Equals(Me._Q_ID, value) = false) Then
				Me.OnQ_Detail_IDChanging(value)
				Me.SendPropertyChanging
				Me._Q_ID = value
				Me.SendPropertyChanged("Q_Detail_ID")
				Me.OnQ_Detail_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_Date", DbType:="Date")>  _
	Public Property Q_Date() As System.Nullable(Of Date)
		Get
			Return Me._Q_Date
		End Get
		Set
			If (Me._Q_Date.Equals(value) = false) Then
				Me.OnQ_DateChanging(value)
				Me.SendPropertyChanging
				Me._Q_Date = value
				Me.SendPropertyChanged("Q_Date")
				Me.OnQ_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_Bonzen", DbType:="NChar(10)")>  _
	Public Property Q_Bonzen() As String
		Get
			Return Me._Q_Bonzen
		End Get
		Set
			If (String.Equals(Me._Q_Bonzen, value) = false) Then
				Me.OnQ_BonzenChanging(value)
				Me.SendPropertyChanging
				Me._Q_Bonzen = value
				Me.SendPropertyChanged("Q_Bonzen")
				Me.OnQ_BonzenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_Tel", DbType:="NVarChar(50)")>  _
	Public Property Q_Tel() As String
		Get
			Return Me._Q_Tel
		End Get
		Set
			If (String.Equals(Me._Q_Tel, value) = false) Then
				Me.OnQ_TelChanging(value)
				Me.SendPropertyChanging
				Me._Q_Tel = value
				Me.SendPropertyChanged("Q_Tel")
				Me.OnQ_TelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_Email", DbType:="NVarChar(50)")>  _
	Public Property Q_Email() As String
		Get
			Return Me._Q_Email
		End Get
		Set
			If (String.Equals(Me._Q_Email, value) = false) Then
				Me.OnQ_EmailChanging(value)
				Me.SendPropertyChanging
				Me._Q_Email = value
				Me.SendPropertyChanged("Q_Email")
				Me.OnQ_EmailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QuotationProposal")>  _
Partial Public Class QuotationProposal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Q_ID As String
	
	Private _Date As System.Nullable(Of Date)
	
	Private _DateSend As System.Nullable(Of Date)
	
	Private _ContactCom As String
	
	Private _ContactName As String
	
	Private _Title As String
	
	Private _BookingBy As String
	
	Private _P_ID As String
	
	Private _CreateDate As Date
	
	Private _RunningNo As Integer
	
	Private _QuotationFiles As EntitySet(Of QuotationFile)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQ_IDChanging(value As String)
    End Sub
    Partial Private Sub OnQ_IDChanged()
    End Sub
    Partial Private Sub OnQ_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnQ_DateChanged()
    End Sub
    Partial Private Sub OnDateSendChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateSendChanged()
    End Sub
    Partial Private Sub OnContactComChanging(value As String)
    End Sub
    Partial Private Sub OnContactComChanged()
    End Sub
    Partial Private Sub OnContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnContactNameChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnBookingByChanging(value As String)
    End Sub
    Partial Private Sub OnBookingByChanged()
    End Sub
    Partial Private Sub OnP_IDChanging(value As String)
    End Sub
    Partial Private Sub OnP_IDChanged()
    End Sub
    Partial Private Sub OnQ_CreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnQ_CreateDateChanged()
    End Sub
    Partial Private Sub OnQ_RunningNoChanging(value As Integer)
    End Sub
    Partial Private Sub OnQ_RunningNoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._QuotationFiles = New EntitySet(Of QuotationFile)(AddressOf Me.attach_QuotationFiles, AddressOf Me.detach_QuotationFiles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_ID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Q_ID() As String
		Get
			Return Me._Q_ID
		End Get
		Set
			If (String.Equals(Me._Q_ID, value) = false) Then
				Me.OnQ_IDChanging(value)
				Me.SendPropertyChanging
				Me._Q_ID = value
				Me.SendPropertyChanged("Q_ID")
				Me.OnQ_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Date", DbType:="Date")>  _
	Public Property Q_Date() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnQ_DateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("Q_Date")
				Me.OnQ_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateSend", DbType:="Date")>  _
	Public Property DateSend() As System.Nullable(Of Date)
		Get
			Return Me._DateSend
		End Get
		Set
			If (Me._DateSend.Equals(value) = false) Then
				Me.OnDateSendChanging(value)
				Me.SendPropertyChanging
				Me._DateSend = value
				Me.SendPropertyChanged("DateSend")
				Me.OnDateSendChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactCom", DbType:="VarChar(200)")>  _
	Public Property ContactCom() As String
		Get
			Return Me._ContactCom
		End Get
		Set
			If (String.Equals(Me._ContactCom, value) = false) Then
				Me.OnContactComChanging(value)
				Me.SendPropertyChanging
				Me._ContactCom = value
				Me.SendPropertyChanged("ContactCom")
				Me.OnContactComChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="VarChar(200)")>  _
	Public Property ContactName() As String
		Get
			Return Me._ContactName
		End Get
		Set
			If (String.Equals(Me._ContactName, value) = false) Then
				Me.OnContactNameChanging(value)
				Me.SendPropertyChanging
				Me._ContactName = value
				Me.SendPropertyChanged("ContactName")
				Me.OnContactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(200)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookingBy", DbType:="VarChar(50)")>  _
	Public Property BookingBy() As String
		Get
			Return Me._BookingBy
		End Get
		Set
			If (String.Equals(Me._BookingBy, value) = false) Then
				Me.OnBookingByChanging(value)
				Me.SendPropertyChanging
				Me._BookingBy = value
				Me.SendPropertyChanged("BookingBy")
				Me.OnBookingByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_P_ID", DbType:="VarChar(50)")>  _
	Public Property P_ID() As String
		Get
			Return Me._P_ID
		End Get
		Set
			If (String.Equals(Me._P_ID, value) = false) Then
				Me.OnP_IDChanging(value)
				Me.SendPropertyChanging
				Me._P_ID = value
				Me.SendPropertyChanged("P_ID")
				Me.OnP_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate")>  _
	Public Property Q_CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnQ_CreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("Q_CreateDate")
				Me.OnQ_CreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunningNo")>  _
	Public Property Q_RunningNo() As Integer
		Get
			Return Me._RunningNo
		End Get
		Set
			If ((Me._RunningNo = value)  _
						= false) Then
				Me.OnQ_RunningNoChanging(value)
				Me.SendPropertyChanging
				Me._RunningNo = value
				Me.SendPropertyChanged("Q_RunningNo")
				Me.OnQ_RunningNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QuotationProposal_QuotationFile", Storage:="_QuotationFiles", ThisKey:="Q_ID", OtherKey:="Q_ID")>  _
	Public Property QuotationFiles() As EntitySet(Of QuotationFile)
		Get
			Return Me._QuotationFiles
		End Get
		Set
			Me._QuotationFiles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_QuotationFiles(ByVal entity As QuotationFile)
		Me.SendPropertyChanging
		entity.QuotationProposal = Me
	End Sub
	
	Private Sub detach_QuotationFiles(ByVal entity As QuotationFile)
		Me.SendPropertyChanging
		entity.QuotationProposal = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[User]")>  _
Partial Public Class User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _user_id As Integer
	
	Private _user_group_id As System.Nullable(Of Integer)
	
	Private _full_name As String
	
	Private _user_name As String
	
	Private _password As String
	
	Private _active As Boolean
	
	Private _UserGroup As EntityRef(Of UserGroup)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuser_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onuser_idChanged()
    End Sub
    Partial Private Sub Onuser_group_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onuser_group_idChanged()
    End Sub
    Partial Private Sub Onfull_nameChanging(value As String)
    End Sub
    Partial Private Sub Onfull_nameChanged()
    End Sub
    Partial Private Sub Onuser_nameChanging(value As String)
    End Sub
    Partial Private Sub Onuser_nameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UserGroup = CType(Nothing, EntityRef(Of UserGroup))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property user_id() As Integer
		Get
			Return Me._user_id
		End Get
		Set
			If ((Me._user_id = value)  _
						= false) Then
				Me.Onuser_idChanging(value)
				Me.SendPropertyChanging
				Me._user_id = value
				Me.SendPropertyChanged("user_id")
				Me.Onuser_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_group_id", DbType:="Int")>  _
	Public Property user_group_id() As System.Nullable(Of Integer)
		Get
			Return Me._user_group_id
		End Get
		Set
			If (Me._user_group_id.Equals(value) = false) Then
				If Me._UserGroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onuser_group_idChanging(value)
				Me.SendPropertyChanging
				Me._user_group_id = value
				Me.SendPropertyChanged("user_group_id")
				Me.Onuser_group_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_full_name", DbType:="VarChar(200)")>  _
	Public Property full_name() As String
		Get
			Return Me._full_name
		End Get
		Set
			If (String.Equals(Me._full_name, value) = false) Then
				Me.Onfull_nameChanging(value)
				Me.SendPropertyChanging
				Me._full_name = value
				Me.SendPropertyChanged("full_name")
				Me.Onfull_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_name", DbType:="VarChar(50)")>  _
	Public Property user_name() As String
		Get
			Return Me._user_name
		End Get
		Set
			If (String.Equals(Me._user_name, value) = false) Then
				Me.Onuser_nameChanging(value)
				Me.SendPropertyChanging
				Me._user_name = value
				Me.SendPropertyChanged("user_name")
				Me.Onuser_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(50)")>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit NOT NULL")>  _
	Public Property active() As Boolean
		Get
			Return Me._active
		End Get
		Set
			If ((Me._active = value)  _
						= false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserGroup_User", Storage:="_UserGroup", ThisKey:="user_group_id", OtherKey:="user_group_id", IsForeignKey:=true)>  _
	Public Property UserGroup() As UserGroup
		Get
			Return Me._UserGroup.Entity
		End Get
		Set
			Dim previousValue As UserGroup = Me._UserGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UserGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UserGroup.Entity = Nothing
					previousValue.Users.Remove(Me)
				End If
				Me._UserGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Users.Add(Me)
					Me._user_group_id = value.user_group_id
				Else
					Me._user_group_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("UserGroup")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserGroup")>  _
Partial Public Class UserGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _user_group_id As Integer
	
	Private _user_group_name As String
	
	Private _display_order As System.Nullable(Of Integer)
	
	Private _active As Boolean
	
	Private _UserGroupRoles As EntitySet(Of UserGroupRole)
	
	Private _Users As EntitySet(Of User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuser_group_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onuser_group_idChanged()
    End Sub
    Partial Private Sub Onuser_group_nameChanging(value As String)
    End Sub
    Partial Private Sub Onuser_group_nameChanged()
    End Sub
    Partial Private Sub Ondisplay_orderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondisplay_orderChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UserGroupRoles = New EntitySet(Of UserGroupRole)(AddressOf Me.attach_UserGroupRoles, AddressOf Me.detach_UserGroupRoles)
		Me._Users = New EntitySet(Of User)(AddressOf Me.attach_Users, AddressOf Me.detach_Users)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_group_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property user_group_id() As Integer
		Get
			Return Me._user_group_id
		End Get
		Set
			If ((Me._user_group_id = value)  _
						= false) Then
				Me.Onuser_group_idChanging(value)
				Me.SendPropertyChanging
				Me._user_group_id = value
				Me.SendPropertyChanged("user_group_id")
				Me.Onuser_group_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_group_name", DbType:="VarChar(200)")>  _
	Public Property user_group_name() As String
		Get
			Return Me._user_group_name
		End Get
		Set
			If (String.Equals(Me._user_group_name, value) = false) Then
				Me.Onuser_group_nameChanging(value)
				Me.SendPropertyChanging
				Me._user_group_name = value
				Me.SendPropertyChanged("user_group_name")
				Me.Onuser_group_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_order", DbType:="Int")>  _
	Public Property display_order() As System.Nullable(Of Integer)
		Get
			Return Me._display_order
		End Get
		Set
			If (Me._display_order.Equals(value) = false) Then
				Me.Ondisplay_orderChanging(value)
				Me.SendPropertyChanging
				Me._display_order = value
				Me.SendPropertyChanged("display_order")
				Me.Ondisplay_orderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit NOT NULL")>  _
	Public Property active() As Boolean
		Get
			Return Me._active
		End Get
		Set
			If ((Me._active = value)  _
						= false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserGroup_UserGroupRole", Storage:="_UserGroupRoles", ThisKey:="user_group_id", OtherKey:="user_group_id")>  _
	Public Property UserGroupRoles() As EntitySet(Of UserGroupRole)
		Get
			Return Me._UserGroupRoles
		End Get
		Set
			Me._UserGroupRoles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserGroup_User", Storage:="_Users", ThisKey:="user_group_id", OtherKey:="user_group_id")>  _
	Public Property Users() As EntitySet(Of User)
		Get
			Return Me._Users
		End Get
		Set
			Me._Users.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_UserGroupRoles(ByVal entity As UserGroupRole)
		Me.SendPropertyChanging
		entity.UserGroup = Me
	End Sub
	
	Private Sub detach_UserGroupRoles(ByVal entity As UserGroupRole)
		Me.SendPropertyChanging
		entity.UserGroup = Nothing
	End Sub
	
	Private Sub attach_Users(ByVal entity As User)
		Me.SendPropertyChanging
		entity.UserGroup = Me
	End Sub
	
	Private Sub detach_Users(ByVal entity As User)
		Me.SendPropertyChanging
		entity.UserGroup = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QuotationItem")>  _
Partial Public Class QuotationItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _QItem_ID As Integer
	
	Private _ID_Q_Detail_Sub As System.Nullable(Of Integer)
	
	Private _price As System.Nullable(Of Decimal)
	
	Private _unit As System.Nullable(Of Decimal)
	
	Private _amount As System.Nullable(Of Decimal)
	
	Private _Q_ID As System.Nullable(Of Integer)
	
	Private _QuotationDescriptionSub As EntityRef(Of QuotationDescriptionSub)
	
	Private _Quotation As EntityRef(Of Quotation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQItem_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnQItem_IDChanged()
    End Sub
    Partial Private Sub OnID_Q_Detail_SubChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Q_Detail_SubChanged()
    End Sub
    Partial Private Sub OnpriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnpriceChanged()
    End Sub
    Partial Private Sub OnunitChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnunitChanged()
    End Sub
    Partial Private Sub OnamountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnamountChanged()
    End Sub
    Partial Private Sub OnQuota_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQuota_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._QuotationDescriptionSub = CType(Nothing, EntityRef(Of QuotationDescriptionSub))
		Me._Quotation = CType(Nothing, EntityRef(Of Quotation))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QItem_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property QItem_ID() As Integer
		Get
			Return Me._QItem_ID
		End Get
		Set
			If ((Me._QItem_ID = value)  _
						= false) Then
				Me.OnQItem_IDChanging(value)
				Me.SendPropertyChanging
				Me._QItem_ID = value
				Me.SendPropertyChanged("QItem_ID")
				Me.OnQItem_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Q_Detail_Sub", DbType:="Int")>  _
	Public Property ID_Q_Detail_Sub() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Q_Detail_Sub
		End Get
		Set
			If (Me._ID_Q_Detail_Sub.Equals(value) = false) Then
				If Me._QuotationDescriptionSub.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Q_Detail_SubChanging(value)
				Me.SendPropertyChanging
				Me._ID_Q_Detail_Sub = value
				Me.SendPropertyChanged("ID_Q_Detail_Sub")
				Me.OnID_Q_Detail_SubChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Decimal(18,2)")>  _
	Public Property price() As System.Nullable(Of Decimal)
		Get
			Return Me._price
		End Get
		Set
			If (Me._price.Equals(value) = false) Then
				Me.OnpriceChanging(value)
				Me.SendPropertyChanging
				Me._price = value
				Me.SendPropertyChanged("price")
				Me.OnpriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit", DbType:="Decimal(18,2)")>  _
	Public Property unit() As System.Nullable(Of Decimal)
		Get
			Return Me._unit
		End Get
		Set
			If (Me._unit.Equals(value) = false) Then
				Me.OnunitChanging(value)
				Me.SendPropertyChanging
				Me._unit = value
				Me.SendPropertyChanged("unit")
				Me.OnunitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amount", DbType:="Decimal(18,2)")>  _
	Public Property amount() As System.Nullable(Of Decimal)
		Get
			Return Me._amount
		End Get
		Set
			If (Me._amount.Equals(value) = false) Then
				Me.OnamountChanging(value)
				Me.SendPropertyChanging
				Me._amount = value
				Me.SendPropertyChanged("amount")
				Me.OnamountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_ID", DbType:="Int")>  _
	Public Property Quota_ID() As System.Nullable(Of Integer)
		Get
			Return Me._Q_ID
		End Get
		Set
			If (Me._Q_ID.Equals(value) = false) Then
				If Me._Quotation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnQuota_IDChanging(value)
				Me.SendPropertyChanging
				Me._Q_ID = value
				Me.SendPropertyChanged("Quota_ID")
				Me.OnQuota_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QuotationDescriptionSub_QuotationItem", Storage:="_QuotationDescriptionSub", ThisKey:="ID_Q_Detail_Sub", OtherKey:="ID_Q_Detail_Sub", IsForeignKey:=true)>  _
	Public Property QuotationDescriptionSub() As QuotationDescriptionSub
		Get
			Return Me._QuotationDescriptionSub.Entity
		End Get
		Set
			Dim previousValue As QuotationDescriptionSub = Me._QuotationDescriptionSub.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._QuotationDescriptionSub.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._QuotationDescriptionSub.Entity = Nothing
					previousValue.QuotationItems.Remove(Me)
				End If
				Me._QuotationDescriptionSub.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.QuotationItems.Add(Me)
					Me._ID_Q_Detail_Sub = value.ID_Q_Detail_Sub
				Else
					Me._ID_Q_Detail_Sub = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("QuotationDescriptionSub")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Quotation_QuotationItem", Storage:="_Quotation", ThisKey:="Quota_ID", OtherKey:="Quota_ID", IsForeignKey:=true)>  _
	Public Property Quotation() As Quotation
		Get
			Return Me._Quotation.Entity
		End Get
		Set
			Dim previousValue As Quotation = Me._Quotation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Quotation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Quotation.Entity = Nothing
					previousValue.QuotationItems.Remove(Me)
				End If
				Me._Quotation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.QuotationItems.Add(Me)
					Me._Q_ID = value.Quota_ID
				Else
					Me._Q_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Quotation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vw_Company")>  _
Partial Public Class vw_Company
	
	Private _prospect_id As Integer
	
	Private _prospect_nameTH As String
	
	Private _prospect_nameEN As String
	
	Private _short_name As String
	
	Private _status_id As String
	
	Private _detail As String
	
	Private _main_id As System.Nullable(Of Integer)
	
	Private _sub_id As System.Nullable(Of Integer)
	
	Private _prospect_address As String
	
	Private _district As String
	
	Private _amphur As String
	
	Private _province_name As String
	
	Private _zipcode As String
	
	Private _tel_number As String
	
	Private _fax As String
	
	Private _mail As String
	
	Private _website As String
	
	Private _activate As String
	
	Private _username As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prospect_id", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property prospect_id() As Integer
		Get
			Return Me._prospect_id
		End Get
		Set
			If ((Me._prospect_id = value)  _
						= false) Then
				Me._prospect_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prospect_nameTH", DbType:="VarChar(100)")>  _
	Public Property prospect_nameTH() As String
		Get
			Return Me._prospect_nameTH
		End Get
		Set
			If (String.Equals(Me._prospect_nameTH, value) = false) Then
				Me._prospect_nameTH = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prospect_nameEN", DbType:="VarChar(100)")>  _
	Public Property prospect_nameEN() As String
		Get
			Return Me._prospect_nameEN
		End Get
		Set
			If (String.Equals(Me._prospect_nameEN, value) = false) Then
				Me._prospect_nameEN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_short_name", DbType:="VarChar(50)")>  _
	Public Property short_name() As String
		Get
			Return Me._short_name
		End Get
		Set
			If (String.Equals(Me._short_name, value) = false) Then
				Me._short_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status_id", DbType:="VarChar(50)")>  _
	Public Property status_id() As String
		Get
			Return Me._status_id
		End Get
		Set
			If (String.Equals(Me._status_id, value) = false) Then
				Me._status_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detail", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property detail() As String
		Get
			Return Me._detail
		End Get
		Set
			If (String.Equals(Me._detail, value) = false) Then
				Me._detail = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_main_id", DbType:="Int")>  _
	Public Property main_id() As System.Nullable(Of Integer)
		Get
			Return Me._main_id
		End Get
		Set
			If (Me._main_id.Equals(value) = false) Then
				Me._main_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sub_id", DbType:="Int")>  _
	Public Property sub_id() As System.Nullable(Of Integer)
		Get
			Return Me._sub_id
		End Get
		Set
			If (Me._sub_id.Equals(value) = false) Then
				Me._sub_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prospect_address", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property prospect_address() As String
		Get
			Return Me._prospect_address
		End Get
		Set
			If (String.Equals(Me._prospect_address, value) = false) Then
				Me._prospect_address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_district", DbType:="VarChar(50)")>  _
	Public Property district() As String
		Get
			Return Me._district
		End Get
		Set
			If (String.Equals(Me._district, value) = false) Then
				Me._district = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amphur", DbType:="VarChar(50)")>  _
	Public Property amphur() As String
		Get
			Return Me._amphur
		End Get
		Set
			If (String.Equals(Me._amphur, value) = false) Then
				Me._amphur = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_province_name", DbType:="VarChar(50)")>  _
	Public Property province_name() As String
		Get
			Return Me._province_name
		End Get
		Set
			If (String.Equals(Me._province_name, value) = false) Then
				Me._province_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zipcode", DbType:="VarChar(10)")>  _
	Public Property zipcode() As String
		Get
			Return Me._zipcode
		End Get
		Set
			If (String.Equals(Me._zipcode, value) = false) Then
				Me._zipcode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tel_number", DbType:="VarChar(50)")>  _
	Public Property tel_number() As String
		Get
			Return Me._tel_number
		End Get
		Set
			If (String.Equals(Me._tel_number, value) = false) Then
				Me._tel_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fax", DbType:="VarChar(50)")>  _
	Public Property fax() As String
		Get
			Return Me._fax
		End Get
		Set
			If (String.Equals(Me._fax, value) = false) Then
				Me._fax = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mail", DbType:="VarChar(50)")>  _
	Public Property mail() As String
		Get
			Return Me._mail
		End Get
		Set
			If (String.Equals(Me._mail, value) = false) Then
				Me._mail = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_website", DbType:="VarChar(50)")>  _
	Public Property website() As String
		Get
			Return Me._website
		End Get
		Set
			If (String.Equals(Me._website, value) = false) Then
				Me._website = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activate", DbType:="NChar(10)")>  _
	Public Property activate() As String
		Get
			Return Me._activate
		End Get
		Set
			If (String.Equals(Me._activate, value) = false) Then
				Me._activate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(50)")>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me._username = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vw_CompanyAttn")>  _
Partial Public Class vw_CompanyAttn
	
	Private _c_id As Integer
	
	Private _prospect_id As System.Nullable(Of Integer)
	
	Private _contactType_id As String
	
	Private _c_name As String
	
	Private _c_attendant As String
	
	Private _c_topic As String
	
	Private _c_date As System.Nullable(Of Date)
	
	Private _c_detail As String
	
	Private _c_mail As String
	
	Private _c_dept As String
	
	Private _c_response As String
	
	Private _c_res_reason As String
	
	Private _responseGroup_id As String
	
	Private _c_result As String
	
	Private _c_next As System.Nullable(Of Date)
	
	Private _c_objective As String
	
	Private _c_tel As String
	
	Private _c_fax As String
	
	Private _username As String
	
	Private _c_next_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_id", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property c_id() As Integer
		Get
			Return Me._c_id
		End Get
		Set
			If ((Me._c_id = value)  _
						= false) Then
				Me._c_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prospect_id", DbType:="Int")>  _
	Public Property prospect_id() As System.Nullable(Of Integer)
		Get
			Return Me._prospect_id
		End Get
		Set
			If (Me._prospect_id.Equals(value) = false) Then
				Me._prospect_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contactType_id", DbType:="VarChar(50)")>  _
	Public Property contactType_id() As String
		Get
			Return Me._contactType_id
		End Get
		Set
			If (String.Equals(Me._contactType_id, value) = false) Then
				Me._contactType_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_name", DbType:="VarChar(100)")>  _
	Public Property c_name() As String
		Get
			Return Me._c_name
		End Get
		Set
			If (String.Equals(Me._c_name, value) = false) Then
				Me._c_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_attendant", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property c_attendant() As String
		Get
			Return Me._c_attendant
		End Get
		Set
			If (String.Equals(Me._c_attendant, value) = false) Then
				Me._c_attendant = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_topic", DbType:="VarChar(500)")>  _
	Public Property c_topic() As String
		Get
			Return Me._c_topic
		End Get
		Set
			If (String.Equals(Me._c_topic, value) = false) Then
				Me._c_topic = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_date", DbType:="DateTime")>  _
	Public Property c_date() As System.Nullable(Of Date)
		Get
			Return Me._c_date
		End Get
		Set
			If (Me._c_date.Equals(value) = false) Then
				Me._c_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_detail", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property c_detail() As String
		Get
			Return Me._c_detail
		End Get
		Set
			If (String.Equals(Me._c_detail, value) = false) Then
				Me._c_detail = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_mail", DbType:="VarChar(50)")>  _
	Public Property c_mail() As String
		Get
			Return Me._c_mail
		End Get
		Set
			If (String.Equals(Me._c_mail, value) = false) Then
				Me._c_mail = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_dept", DbType:="VarChar(50)")>  _
	Public Property c_dept() As String
		Get
			Return Me._c_dept
		End Get
		Set
			If (String.Equals(Me._c_dept, value) = false) Then
				Me._c_dept = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_response", DbType:="VarChar(50)")>  _
	Public Property c_response() As String
		Get
			Return Me._c_response
		End Get
		Set
			If (String.Equals(Me._c_response, value) = false) Then
				Me._c_response = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_res_reason", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property c_res_reason() As String
		Get
			Return Me._c_res_reason
		End Get
		Set
			If (String.Equals(Me._c_res_reason, value) = false) Then
				Me._c_res_reason = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_responseGroup_id", DbType:="VarChar(50)")>  _
	Public Property responseGroup_id() As String
		Get
			Return Me._responseGroup_id
		End Get
		Set
			If (String.Equals(Me._responseGroup_id, value) = false) Then
				Me._responseGroup_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_result", DbType:="VarChar(50)")>  _
	Public Property c_result() As String
		Get
			Return Me._c_result
		End Get
		Set
			If (String.Equals(Me._c_result, value) = false) Then
				Me._c_result = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_next", DbType:="DateTime")>  _
	Public Property c_next() As System.Nullable(Of Date)
		Get
			Return Me._c_next
		End Get
		Set
			If (Me._c_next.Equals(value) = false) Then
				Me._c_next = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_objective", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property c_objective() As String
		Get
			Return Me._c_objective
		End Get
		Set
			If (String.Equals(Me._c_objective, value) = false) Then
				Me._c_objective = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_tel", DbType:="VarChar(50)")>  _
	Public Property c_tel() As String
		Get
			Return Me._c_tel
		End Get
		Set
			If (String.Equals(Me._c_tel, value) = false) Then
				Me._c_tel = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_fax", DbType:="VarChar(50)")>  _
	Public Property c_fax() As String
		Get
			Return Me._c_fax
		End Get
		Set
			If (String.Equals(Me._c_fax, value) = false) Then
				Me._c_fax = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(50)")>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me._username = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_next_id", DbType:="Int")>  _
	Public Property c_next_id() As System.Nullable(Of Integer)
		Get
			Return Me._c_next_id
		End Get
		Set
			If (Me._c_next_id.Equals(value) = false) Then
				Me._c_next_id = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QuotationFile")>  _
Partial Public Class QuotationFile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Q_FileID As Integer
	
	Private _Q_ID As String
	
	Private _Q_FileName As String
	
	Private _Q_ContentType As String
	
	Private _Q_FileExtension As String
	
	Private _Q_FileContent As System.Data.Linq.Binary
	
	Private _Q_FileDate As System.Nullable(Of Date)
	
	Private _QuotationProposal As EntityRef(Of QuotationProposal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQ_FileIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnQ_FileIDChanged()
    End Sub
    Partial Private Sub OnQ_IDChanging(value As String)
    End Sub
    Partial Private Sub OnQ_IDChanged()
    End Sub
    Partial Private Sub OnQ_FileNameChanging(value As String)
    End Sub
    Partial Private Sub OnQ_FileNameChanged()
    End Sub
    Partial Private Sub OnQ_ContentTypeChanging(value As String)
    End Sub
    Partial Private Sub OnQ_ContentTypeChanged()
    End Sub
    Partial Private Sub OnQ_FileExtensionChanging(value As String)
    End Sub
    Partial Private Sub OnQ_FileExtensionChanged()
    End Sub
    Partial Private Sub OnQ_FileContentChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnQ_FileContentChanged()
    End Sub
    Partial Private Sub OnQ_FileDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnQ_FileDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._QuotationProposal = CType(Nothing, EntityRef(Of QuotationProposal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_FileID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Q_FileID() As Integer
		Get
			Return Me._Q_FileID
		End Get
		Set
			If ((Me._Q_FileID = value)  _
						= false) Then
				Me.OnQ_FileIDChanging(value)
				Me.SendPropertyChanging
				Me._Q_FileID = value
				Me.SendPropertyChanged("Q_FileID")
				Me.OnQ_FileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_ID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Q_ID() As String
		Get
			Return Me._Q_ID
		End Get
		Set
			If (String.Equals(Me._Q_ID, value) = false) Then
				If Me._QuotationProposal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnQ_IDChanging(value)
				Me.SendPropertyChanging
				Me._Q_ID = value
				Me.SendPropertyChanged("Q_ID")
				Me.OnQ_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_FileName", DbType:="VarChar(200)")>  _
	Public Property Q_FileName() As String
		Get
			Return Me._Q_FileName
		End Get
		Set
			If (String.Equals(Me._Q_FileName, value) = false) Then
				Me.OnQ_FileNameChanging(value)
				Me.SendPropertyChanging
				Me._Q_FileName = value
				Me.SendPropertyChanged("Q_FileName")
				Me.OnQ_FileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_ContentType", DbType:="VarChar(200)")>  _
	Public Property Q_ContentType() As String
		Get
			Return Me._Q_ContentType
		End Get
		Set
			If (String.Equals(Me._Q_ContentType, value) = false) Then
				Me.OnQ_ContentTypeChanging(value)
				Me.SendPropertyChanging
				Me._Q_ContentType = value
				Me.SendPropertyChanged("Q_ContentType")
				Me.OnQ_ContentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_FileExtension", DbType:="VarChar(10)")>  _
	Public Property Q_FileExtension() As String
		Get
			Return Me._Q_FileExtension
		End Get
		Set
			If (String.Equals(Me._Q_FileExtension, value) = false) Then
				Me.OnQ_FileExtensionChanging(value)
				Me.SendPropertyChanging
				Me._Q_FileExtension = value
				Me.SendPropertyChanged("Q_FileExtension")
				Me.OnQ_FileExtensionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_FileContent", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Q_FileContent() As System.Data.Linq.Binary
		Get
			Return Me._Q_FileContent
		End Get
		Set
			If (Object.Equals(Me._Q_FileContent, value) = false) Then
				Me.OnQ_FileContentChanging(value)
				Me.SendPropertyChanging
				Me._Q_FileContent = value
				Me.SendPropertyChanged("Q_FileContent")
				Me.OnQ_FileContentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Q_FileDate", DbType:="DateTime")>  _
	Public Property Q_FileDate() As System.Nullable(Of Date)
		Get
			Return Me._Q_FileDate
		End Get
		Set
			If (Me._Q_FileDate.Equals(value) = false) Then
				Me.OnQ_FileDateChanging(value)
				Me.SendPropertyChanging
				Me._Q_FileDate = value
				Me.SendPropertyChanged("Q_FileDate")
				Me.OnQ_FileDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QuotationProposal_QuotationFile", Storage:="_QuotationProposal", ThisKey:="Q_ID", OtherKey:="Q_ID", IsForeignKey:=true)>  _
	Public Property QuotationProposal() As QuotationProposal
		Get
			Return Me._QuotationProposal.Entity
		End Get
		Set
			Dim previousValue As QuotationProposal = Me._QuotationProposal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._QuotationProposal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._QuotationProposal.Entity = Nothing
					previousValue.QuotationFiles.Remove(Me)
				End If
				Me._QuotationProposal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.QuotationFiles.Add(Me)
					Me._Q_ID = value.Q_ID
				Else
					Me._Q_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("QuotationProposal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Quotation")>  _
Partial Public Class Quotation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Quota_ID As Integer
	
	Private _company_name As String
	
	Private _attn As String
	
	Private _tel As String
	
	Private _fax As String
	
	Private _email As String
	
	Private _quotation_no As String
	
	Private _quotation_date As System.Nullable(Of Date)
	
	Private _quotation_from As String
	
	Private _bonzen_tel As String
	
	Private _bonzen_email As String
	
	Private _total_amount As System.Nullable(Of Decimal)
	
	Private _remark As String
	
	Private _Vat As System.Nullable(Of Integer)
	
	Private _Vat_amount As System.Nullable(Of Decimal)
	
	Private _condition As String
	
	Private _quota_status As System.Nullable(Of Integer)
	
	Private _QuotationItems As EntitySet(Of QuotationItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQuota_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuota_IDChanged()
    End Sub
    Partial Private Sub Oncompany_nameChanging(value As String)
    End Sub
    Partial Private Sub Oncompany_nameChanged()
    End Sub
    Partial Private Sub OnattnChanging(value As String)
    End Sub
    Partial Private Sub OnattnChanged()
    End Sub
    Partial Private Sub OntelChanging(value As String)
    End Sub
    Partial Private Sub OntelChanged()
    End Sub
    Partial Private Sub OnfaxChanging(value As String)
    End Sub
    Partial Private Sub OnfaxChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub Onquotation_noChanging(value As String)
    End Sub
    Partial Private Sub Onquotation_noChanged()
    End Sub
    Partial Private Sub Onquotation_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onquotation_dateChanged()
    End Sub
    Partial Private Sub Onquotation_fromChanging(value As String)
    End Sub
    Partial Private Sub Onquotation_fromChanged()
    End Sub
    Partial Private Sub Onbonzen_telChanging(value As String)
    End Sub
    Partial Private Sub Onbonzen_telChanged()
    End Sub
    Partial Private Sub Onbonzen_emailChanging(value As String)
    End Sub
    Partial Private Sub Onbonzen_emailChanged()
    End Sub
    Partial Private Sub Ontotal_amountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Ontotal_amountChanged()
    End Sub
    Partial Private Sub OnremarkChanging(value As String)
    End Sub
    Partial Private Sub OnremarkChanged()
    End Sub
    Partial Private Sub OnVatChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVatChanged()
    End Sub
    Partial Private Sub OnVat_amountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnVat_amountChanged()
    End Sub
    Partial Private Sub OnconditionChanging(value As String)
    End Sub
    Partial Private Sub OnconditionChanged()
    End Sub
    Partial Private Sub Onquota_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onquota_statusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._QuotationItems = New EntitySet(Of QuotationItem)(AddressOf Me.attach_QuotationItems, AddressOf Me.detach_QuotationItems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quota_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Quota_ID() As Integer
		Get
			Return Me._Quota_ID
		End Get
		Set
			If ((Me._Quota_ID = value)  _
						= false) Then
				Me.OnQuota_IDChanging(value)
				Me.SendPropertyChanging
				Me._Quota_ID = value
				Me.SendPropertyChanged("Quota_ID")
				Me.OnQuota_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company_name", DbType:="VarChar(200)")>  _
	Public Property company_name() As String
		Get
			Return Me._company_name
		End Get
		Set
			If (String.Equals(Me._company_name, value) = false) Then
				Me.Oncompany_nameChanging(value)
				Me.SendPropertyChanging
				Me._company_name = value
				Me.SendPropertyChanged("company_name")
				Me.Oncompany_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_attn", DbType:="VarChar(200)")>  _
	Public Property attn() As String
		Get
			Return Me._attn
		End Get
		Set
			If (String.Equals(Me._attn, value) = false) Then
				Me.OnattnChanging(value)
				Me.SendPropertyChanging
				Me._attn = value
				Me.SendPropertyChanged("attn")
				Me.OnattnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tel", DbType:="VarChar(200)")>  _
	Public Property tel() As String
		Get
			Return Me._tel
		End Get
		Set
			If (String.Equals(Me._tel, value) = false) Then
				Me.OntelChanging(value)
				Me.SendPropertyChanging
				Me._tel = value
				Me.SendPropertyChanged("tel")
				Me.OntelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fax", DbType:="VarChar(200)")>  _
	Public Property fax() As String
		Get
			Return Me._fax
		End Get
		Set
			If (String.Equals(Me._fax, value) = false) Then
				Me.OnfaxChanging(value)
				Me.SendPropertyChanging
				Me._fax = value
				Me.SendPropertyChanged("fax")
				Me.OnfaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(200)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quotation_no", DbType:="NVarChar(200)")>  _
	Public Property quotation_no() As String
		Get
			Return Me._quotation_no
		End Get
		Set
			If (String.Equals(Me._quotation_no, value) = false) Then
				Me.Onquotation_noChanging(value)
				Me.SendPropertyChanging
				Me._quotation_no = value
				Me.SendPropertyChanged("quotation_no")
				Me.Onquotation_noChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quotation_date", DbType:="Date")>  _
	Public Property quotation_date() As System.Nullable(Of Date)
		Get
			Return Me._quotation_date
		End Get
		Set
			If (Me._quotation_date.Equals(value) = false) Then
				Me.Onquotation_dateChanging(value)
				Me.SendPropertyChanging
				Me._quotation_date = value
				Me.SendPropertyChanged("quotation_date")
				Me.Onquotation_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quotation_from", DbType:="VarChar(200)")>  _
	Public Property quotation_from() As String
		Get
			Return Me._quotation_from
		End Get
		Set
			If (String.Equals(Me._quotation_from, value) = false) Then
				Me.Onquotation_fromChanging(value)
				Me.SendPropertyChanging
				Me._quotation_from = value
				Me.SendPropertyChanged("quotation_from")
				Me.Onquotation_fromChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bonzen_tel", DbType:="NVarChar(200)")>  _
	Public Property bonzen_tel() As String
		Get
			Return Me._bonzen_tel
		End Get
		Set
			If (String.Equals(Me._bonzen_tel, value) = false) Then
				Me.Onbonzen_telChanging(value)
				Me.SendPropertyChanging
				Me._bonzen_tel = value
				Me.SendPropertyChanged("bonzen_tel")
				Me.Onbonzen_telChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bonzen_email", DbType:="NVarChar(200)")>  _
	Public Property bonzen_email() As String
		Get
			Return Me._bonzen_email
		End Get
		Set
			If (String.Equals(Me._bonzen_email, value) = false) Then
				Me.Onbonzen_emailChanging(value)
				Me.SendPropertyChanging
				Me._bonzen_email = value
				Me.SendPropertyChanged("bonzen_email")
				Me.Onbonzen_emailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total_amount", DbType:="Decimal(18,2)")>  _
	Public Property total_amount() As System.Nullable(Of Decimal)
		Get
			Return Me._total_amount
		End Get
		Set
			If (Me._total_amount.Equals(value) = false) Then
				Me.Ontotal_amountChanging(value)
				Me.SendPropertyChanging
				Me._total_amount = value
				Me.SendPropertyChanged("total_amount")
				Me.Ontotal_amountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_remark", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property remark() As String
		Get
			Return Me._remark
		End Get
		Set
			If (String.Equals(Me._remark, value) = false) Then
				Me.OnremarkChanging(value)
				Me.SendPropertyChanging
				Me._remark = value
				Me.SendPropertyChanged("remark")
				Me.OnremarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vat", DbType:="Int")>  _
	Public Property Vat() As System.Nullable(Of Integer)
		Get
			Return Me._Vat
		End Get
		Set
			If (Me._Vat.Equals(value) = false) Then
				Me.OnVatChanging(value)
				Me.SendPropertyChanging
				Me._Vat = value
				Me.SendPropertyChanged("Vat")
				Me.OnVatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vat_amount", DbType:="Decimal(18,2)")>  _
	Public Property Vat_amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Vat_amount
		End Get
		Set
			If (Me._Vat_amount.Equals(value) = false) Then
				Me.OnVat_amountChanging(value)
				Me.SendPropertyChanging
				Me._Vat_amount = value
				Me.SendPropertyChanged("Vat_amount")
				Me.OnVat_amountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_condition", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property condition() As String
		Get
			Return Me._condition
		End Get
		Set
			If (String.Equals(Me._condition, value) = false) Then
				Me.OnconditionChanging(value)
				Me.SendPropertyChanging
				Me._condition = value
				Me.SendPropertyChanged("condition")
				Me.OnconditionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quota_status", DbType:="Int")>  _
	Public Property quota_status() As System.Nullable(Of Integer)
		Get
			Return Me._quota_status
		End Get
		Set
			If (Me._quota_status.Equals(value) = false) Then
				Me.Onquota_statusChanging(value)
				Me.SendPropertyChanging
				Me._quota_status = value
				Me.SendPropertyChanged("quota_status")
				Me.Onquota_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Quotation_QuotationItem", Storage:="_QuotationItems", ThisKey:="Quota_ID", OtherKey:="Quota_ID")>  _
	Public Property QuotationItems() As EntitySet(Of QuotationItem)
		Get
			Return Me._QuotationItems
		End Get
		Set
			Me._QuotationItems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_QuotationItems(ByVal entity As QuotationItem)
		Me.SendPropertyChanging
		entity.Quotation = Me
	End Sub
	
	Private Sub detach_QuotationItems(ByVal entity As QuotationItem)
		Me.SendPropertyChanging
		entity.Quotation = Nothing
	End Sub
End Class
